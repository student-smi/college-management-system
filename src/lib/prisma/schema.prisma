// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Admin {
//   id      String @id
//   usename String @unique
// }

// model Student {
//   id        String   @id
//   usename   String   @unique
//   name      String
//   surname   String
//   email     String? @unique
//   phone     String @unique
//   address   String
//   img       String?
//   bloodType String?
//   sex       UserSex
//   createAt  DateTime @default(now())
//   parentId  String
//   parent    Parent   @relation(fields: [parentId], references: [id])
//   classId  Int
//   class Class @relation(fields: [classId], references: [id])
//   gradeId Int
//   grade Grade @relation(fields: [gradeId] , references: [id])
//   attendance Attendance[]
//   result Result[]

// }

// model Teacher {
//   id        String    @id
//   usename   String    @unique
//   name      String
//   surname   String
//   email     String?  @unique
//   phone     String? @unique
//   address   String
//   img       String?
//   bloodType String?
//   sex       UserSex
//   createAt  DateTime  @default(now())
//   subjects  Subject[]
//   lessons Lesson[]
//   classes Class[]
// }

// model Parent {
//   id       String    @id
//   usename  String    @unique
//   name     String
//   surname  String
//   email    String?  @unique
//   phone    String   @unique
//   address  String
//   createAt DateTime  @default(now())
//   students Student[]
// }

// model Class {
//   id       Int       @id @default(autoincrement())
//   name     String    @unique
//   capacity Int
//   lessons  Lesson[]
//   supervisorId String
//   supervisor Teacher @relation(fields: [supervisorId] , references: [id])
//   students Student[]
//   gradeId Int
//   grade Grade @relation(fields: [gradeId] , references: [id])
//   announcements Announcement[]
//   events Event[]
// }

// model Grade {
//   id Int @id @default(autoincrement())
//   level Int @unique
//   students Student[]
//   classes Class[]

// }

// model Subject {
//   id       Int       @id @default(autoincrement())
//   name     String    @unique
//   teachers Teacher[]
//   lessons  Lesson[]
// }

// model Lesson {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique
//   day       day
//   startTime DateTime
//   endTime   DateTime

//   subjectId Int
//   sudject   Subject @relation(fields: [subjectId], references: [id])
//   classID   Int
//   class     Class   @relation(fields: [classID], references: [id])
//    teacherID   String
//    teacher     Teacher   @relation(fields: [teacherID], references: [id])
//  exams Exam[]
//  assignments Assignment[]
//  attendance Attendance[]
// }

// model Exam {
//   id       Int       @id @default(autoincrement())
//   title String
//   startTime DateTime
//   endTime DateTime
//   lessonId Int
//   lesson Lesson @relation(fields: [lessonId] , references: [id])
//   result Result[]
// }

// model Assignment {
//     id       Int       @id @default(autoincrement())
//     title String
//     startDate DateTime
//     dueDate DateTime
//     lessonId Int
//   lesson Lesson @relation(fields: [lessonId] , references: [id])
//   result Result[]

// }

// model Result {
//     id       Int       @id @default(autoincrement())
//     score Int
//     examId Int?
//     exam Exam? @relation(fields: [examId] , references: [id])
//      assignmentId Int?
//    assignment Assignment? @relation(fields: [assignmentId] , references: [id])
//    studentId String
//   student   Student @relation(fields: [studentId], references: [id])
// }

// model Attendance {
//   id       Int       @id @default(autoincrement())
//   date DateTime
//   paresent Boolean
//  lessonId Int
//   lesson Lesson @relation(fields: [lessonId] , references: [id])
// studentId String
//   student   Student @relation(fields: [studentId], references: [id])

// }

// model Event{
//     id       Int       @id @default(autoincrement())
//     title String
//     depscription String
//     startDate DateTime
//     endDate DateTime
//     classId Int?
//     class Class? @relation(fields: [classId] , references: [id])
// }

// model Announcement {
//     id       Int       @id @default(autoincrement())
//       title String
//        depscription String
//     Date DateTime
//       classId Int?
//     class Class? @relation(fields: [classId] , references: [id])

// }

// enum UserSex {
//   MALE
//   FEMALE
// }

// enum day {
//   MONDAY
//   TUESDAY
//   WEDNESDAY
//   THURSDAY
//   FRIDAY
//   SATURDAY
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Admin {
  id       String @id @unique
  username String @unique
}

model Student {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String?      @unique
  phone      String       @unique
  address    String
  img        String?
  bloodType  String?
  sex        UserSex
  createdAt  DateTime     @default(now())
  parentId   String
  parent     Parent       @relation(fields: [parentId], references: [id])
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  gradeId    Int
  grade      Grade        @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  result     Result[]
  birthday   DateTime
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String?
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  lessons       Lesson[]
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  announcements Announcement[]
  events        Event[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
  classes  Class[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendance  Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  result    Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  result    Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
